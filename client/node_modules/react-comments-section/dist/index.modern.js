import React, { createContext, useState, useEffect, useContext } from 'react';
import uuid from 'react-uuid';
import 'reactjs-popup/dist/index.css';
import Popup from 'reactjs-popup';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faReply, faEllipsisV } from '@fortawesome/free-solid-svg-icons';

var styles = {"section":"_12xdX","inputBox":"_2STY7","inputActions":"_9-5lp","postBtn":"_3oc4k","cancelBtn":"_36TCS","form":"_CXD_f","userImg":"_27hXc","postComment":"_1blCt","displayComments":"_1SugS","halfDiv":"_qWiSF","userInfo":"_1i6uS","commentsTwo":"_155_V","fullName":"_2Axcq","replyBtn":"_1Njvz","userActions":"_34q_J","actionsBtn":"_3ypnz","replySection":"_l0opN","actionDiv":"_yEQPV","editBtn":"_333BI","deleteBtn":"_2YYVO","signBox":"_1Vv8n","signLine":"_1Ogr8","loginBtn":"_1Oc7K","signBtn":"_20VaH"};

var ActionContext = createContext();
var ActionProvider = function ActionProvider(_ref) {
  var children = _ref.children,
      currentUser = _ref.currentUser,
      setComment = _ref.setComment,
      comments = _ref.comments,
      signinUrl = _ref.signinUrl,
      signupUrl = _ref.signupUrl,
      customInput = _ref.customInput;

  var _useState = useState([]),
      replies = _useState[0],
      setReplies = _useState[1];

  var _useState2 = useState(),
      user = _useState2[0],
      setUser = _useState2[1];

  var _useState3 = useState([]),
      editArr = _useState3[0],
      setEdit = _useState3[1];

  useEffect(function () {
    if (currentUser) {
      setUser(true);
    } else {
      setUser(false);
    }
  });

  var handleAction = function handleAction(id, edit) {
    edit ? setEdit([].concat(editArr, [id])) : setReplies([].concat(replies, [id]));
  };

  var handleCancel = function handleCancel(id, edit) {
    if (edit) {
      var list = [].concat(editArr);
      var newList = list.filter(function (i) {
        return i !== id;
      });
      setEdit(newList);
    } else if (!edit) {
      var _list = [].concat(replies);

      var _newList = _list.filter(function (i) {
        return i !== id;
      });

      setReplies(_newList);
    }
  };

  var onSubmit = function onSubmit(text, parentId, child) {
    if (text.length > 0) {
      if (!parentId && !child) {
        setComment([].concat(comments, [{
          userId: currentUser.userId,
          comId: uuid(),
          avatarUrl: currentUser.avatarUrl,
          fullName: currentUser.name,
          text: text
        }]));
      } else if (parentId && child) {
        var newList = [].concat(comments);
        var index = newList.findIndex(function (x) {
          return x.comId === parentId;
        });
        newList[index].replies.push({
          userId: currentUser.userId,
          comId: uuid(),
          avatarUrl: currentUser.avatarUrl,
          fullName: currentUser.name,
          text: text
        });
        setComment(newList);
      } else if (parentId && !child) {
        var _newList2 = [].concat(comments);

        var _index = _newList2.findIndex(function (x) {
          return x.comId === parentId;
        });

        var newReplies = _newList2[_index].replies === undefined ? [] : [].concat(_newList2[_index].replies);
        newReplies.push({
          userId: currentUser.userId,
          comId: uuid(),
          avatarUrl: currentUser.avatarUrl,
          fullName: currentUser.name,
          text: text
        });
        _newList2[_index].replies = newReplies;
        setComment(_newList2);
      }
    }
  };

  var editText = function editText(id, text, parentId) {
    if (parentId === undefined) {
      var newList = [].concat(comments);
      var index = newList.findIndex(function (x) {
        return x.comId === id;
      });
      newList[index].text = text;
      setComment(newList);
    } else if (parentId !== undefined) {
      var _newList3 = [].concat(comments);

      var _index2 = _newList3.findIndex(function (x) {
        return x.comId === parentId;
      });

      var replyIndex = _newList3[_index2].replies.findIndex(function (i) {
        return i.comId === id;
      });

      _newList3[_index2].replies[replyIndex].text = text;
      setComment(_newList3);
    }
  };

  var deleteText = function deleteText(id, parentId) {
    if (parentId === undefined) {
      var newList = [].concat(comments);
      var filter = newList.filter(function (x) {
        return x.comId !== id;
      });
      setComment(filter);
    } else if (parentId !== undefined) {
      var _newList4 = [].concat(comments);

      var index = _newList4.findIndex(function (x) {
        return x.comId === parentId;
      });

      var _filter = _newList4[index].replies.filter(function (x) {
        return x.comId !== id;
      });

      _newList4[index].replies = _filter;
      setComment(_newList4);
    }
  };

  var submit = function submit(cancellor, text, parentId, edit, setText, child) {
    if (edit) {
      editText(cancellor, text, parentId);
      handleCancel(cancellor, edit);
      setText('');
    } else {
      onSubmit(text, parentId, child);
      handleCancel(cancellor);
      setText('');
    }
  };

  return /*#__PURE__*/React.createElement(ActionContext.Provider, {
    value: {
      onSubmit: onSubmit,
      userImg: currentUser && currentUser.avatarUrl,
      userId: currentUser && currentUser.userId,
      handleAction: handleAction,
      handleCancel: handleCancel,
      replies: replies,
      setReplies: setReplies,
      editArr: editArr,
      onEdit: editText,
      onDelete: deleteText,
      signinUrl: signinUrl,
      signupUrl: signupUrl,
      user: user,
      customInput: customInput,
      submit: submit
    }
  }, children);
};

var InputField = function InputField(_ref) {
  var cancellor = _ref.cancellor,
      parentId = _ref.parentId,
      child = _ref.child,
      value = _ref.value,
      edit = _ref.edit,
      main = _ref.main;

  var _useState = useState(''),
      text = _useState[0],
      setText = _useState[1];

  var handleChange = function handleChange(e) {
    setText(e.target.value);
  };

  useEffect(function () {
    setText(value);
  }, [value]);
  var actions = useContext(ActionContext);
  return /*#__PURE__*/React.createElement("form", {
    className: styles.form,
    style: !child && !edit && main === undefined ? {
      marginLeft: 36
    } : {
      marginLeft: 8
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.userImg
  }, /*#__PURE__*/React.createElement("img", {
    src: actions.userImg,
    style: {
      width: 38,
      height: 38,
      borderRadius: 38 / 2
    },
    alt: "userIcon"
  })), /*#__PURE__*/React.createElement("input", {
    className: styles.postComment,
    type: "text",
    placeholder: "Type your reply here.",
    component: "input",
    value: text,
    onChange: handleChange
  }), /*#__PURE__*/React.createElement("div", {
    className: styles.inputActions
  }, /*#__PURE__*/React.createElement("button", {
    className: styles.postBtn,
    onClick: function onClick() {
      return edit === true ? actions.submit(cancellor, text, parentId, true, setText) : actions.submit(cancellor, text, parentId, false, setText);
    },
    type: "button",
    disabled: !text,
    style: !text ? {
      backgroundColor: '#84dcff'
    } : {
      backgroundColor: '#30c3fd'
    }
  }, "Post"), (text || parentId) && /*#__PURE__*/React.createElement("button", {
    className: styles.cancelBtn,
    onClick: function onClick() {
      return edit ? actions.handleCancel(cancellor, edit) : actions.handleCancel(cancellor);
    }
  }, "Cancel")));
};

var modal = {
  fontSize: '16px'
};
var modalClose = {
  cursor: 'pointer',
  position: 'absolute',
  display: 'block',
  padding: '2px 5px',
  lineHeight: '20px',
  right: '-10px',
  top: '-10px',
  fontSize: '24px',
  background: '#ffffff',
  borderRadius: '18px',
  border: '1px solid #cfcece',
  outline: 'none'
};
var modalHeader = {
  width: '100%',
  borderBottom: '1px solid gray',
  fontSize: '18px',
  textAlign: 'center',
  padding: '5px'
};
var modalContent = {
  width: '100%',
  padding: '10px 10px'
};
var modalActions = {
  width: ' 100%',
  padding: ' 10px 5px',
  margin: ' auto',
  textAlign: ' center'
};
var modalActionBtn = {
  backgroundColor: 'transparent',
  outline: 'none',
  border: '1px solid gray',
  padding: '4px 12px',
  cursor: 'pointer'
};
var modalDelBtn = {
  backgroundColor: 'transparent',
  outline: 'none',
  border: '1px solid gray',
  marginLeft: '10px',
  padding: '4px 12px',
  cursor: 'pointer'
};

var CommentStructure = function CommentStructure(_ref) {
  var i = _ref.i,
      reply = _ref.reply,
      parentId = _ref.parentId;
  var actions = useContext(ActionContext);
  var edit = true;
  return /*#__PURE__*/React.createElement("div", {
    className: styles.halfDiv
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.userInfo,
    style: reply && {
      marginLeft: 15,
      marginTop: '6px'
    }
  }, /*#__PURE__*/React.createElement("div", null, i.text), /*#__PURE__*/React.createElement("div", {
    className: styles.commentsTwo
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("img", {
    src: i.avatarUrl,
    style: {
      width: 24,
      height: 24,
      borderRadius: 24 / 2
    },
    alt: "userIcon"
  })), /*#__PURE__*/React.createElement("div", {
    className: styles.fullName
  }, i.fullName, " "), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: styles.replyBtn,
    onClick: function onClick() {
      return actions.handleAction(i.comId);
    },
    disabled: !actions.user
  }, ' ', /*#__PURE__*/React.createElement(FontAwesomeIcon, {
    icon: faReply,
    size: "1x",
    color: "#a5a5a5"
  }), " Reply")))), /*#__PURE__*/React.createElement("div", {
    className: styles.userActions
  }, actions.userId === i.userId && actions.user && /*#__PURE__*/React.createElement(Popup, {
    role: "tooltip",
    trigger: /*#__PURE__*/React.createElement("button", {
      className: styles.actionsBtn
    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {
      icon: faEllipsisV,
      size: "1x",
      color: "#b9b9b9"
    })),
    position: "right center",
    nested: true
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.actionDiv
  }, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: styles.editBtn,
    onClick: function onClick() {
      return actions.handleAction(i.comId, edit);
    }
  }, ' ', "edit")), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Popup, {
    trigger: /*#__PURE__*/React.createElement("button", {
      className: styles.deleteBtn
    }, " delete"),
    modal: true,
    nested: true
  }, function (close) {
    return /*#__PURE__*/React.createElement("div", {
      className: "modal",
      style: modal
    }, /*#__PURE__*/React.createElement("button", {
      className: "close",
      onClick: close,
      style: modalClose
    }, "\xD7"), /*#__PURE__*/React.createElement("div", {
      className: "header",
      style: modalHeader
    }, ' ', "Delete Comment", ' '), /*#__PURE__*/React.createElement("div", {
      className: "content",
      style: modalContent
    }, ' ', "Delete your comment permanently?"), /*#__PURE__*/React.createElement("div", {
      className: "actions",
      style: modalActions
    }, /*#__PURE__*/React.createElement("button", {
      className: "button",
      style: modalActionBtn,
      onClick: function onClick() {
        actions.onDelete(i.comId, parentId);
        close();
      }
    }, "Delete"), /*#__PURE__*/React.createElement("button", {
      className: "button",
      style: modalDelBtn,
      onClick: function onClick() {
        close();
      }
    }, "Cancel")));
  }))))));
};

var DisplayComments = function DisplayComments(_ref) {
  var comments = _ref.comments;
  var actions = useContext(ActionContext);
  return /*#__PURE__*/React.createElement("div", null, comments.map(function (i, index) {
    return /*#__PURE__*/React.createElement("div", {
      key: i.comId
    }, actions.editArr.filter(function (id) {
      return id === i.comId;
    }).length !== 0 ? actions.customInput ? actions.customInput({
      cancellor: i.comId,
      value: i.text,
      handleCancel: actions.handleCancel,
      submit: actions.submit,
      edit: true
    }) : /*#__PURE__*/React.createElement(InputField, {
      cancellor: i.comId,
      value: i.text,
      edit: true
    }) : /*#__PURE__*/React.createElement(CommentStructure, {
      i: i,
      handleEdit: function handleEdit() {
        return actions.handleAction;
      }
    }), actions.replies.filter(function (id) {
      return id === i.comId;
    }).length !== 0 && (actions.customInput ? actions.customInput({
      cancellor: i.comId,
      parentId: i.comId,
      submit: actions.submit,
      handleCancel: actions.handleCancel,
      edit: false
    }) : /*#__PURE__*/React.createElement(InputField, {
      cancellor: i.comId,
      parentId: i.comId
    })), /*#__PURE__*/React.createElement("div", {
      className: styles.replySection
    }, i.replies && i.replies.map(function (a, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: a.comId
      }, actions.editArr.filter(function (id) {
        return id === a.comId;
      }).length !== 0 ? actions.customInput ? actions.customInput({
        cancellor: a.comId,
        value: a.text,
        handleCancel: actions.handleCancel,
        edit: true,
        parentId: i.comId,
        submit: actions.submit
      }) : /*#__PURE__*/React.createElement(InputField, {
        cancellor: a.comId,
        value: a.text,
        edit: true,
        parentId: i.comId
      }) : /*#__PURE__*/React.createElement(CommentStructure, {
        i: a,
        reply: true,
        parentId: i.comId,
        handleEdit: function handleEdit() {
          return actions.handleAction;
        }
      }), actions.replies.filter(function (id) {
        return id === a.comId;
      }).length !== 0 && (actions.customInput ? actions.customInput({
        cancellor: a.comId,
        parentId: i.comId,
        child: true,
        submit: actions.submit,
        handleCancel: actions.handleCancel,
        edit: false
      }) : /*#__PURE__*/React.createElement(InputField, {
        cancellor: a.comId,
        parentId: i.comId,
        child: true
      })));
    })));
  }));
};

var SignField = function SignField() {
  var actions = useContext(ActionContext);

  var handleDivClick = function handleDivClick(e) {
    if (e.target.name === 'login') {
      window.location.href = actions.signinUrl;
    } else if (e.target.name === 'signup') {
      window.location.href = actions.signupUrl;
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    className: styles.signBox
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.signLine
  }, "Log in or sign up to leave a comment"), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("button", {
    className: styles.loginBtn,
    name: "login",
    onClick: function onClick(e) {
      return handleDivClick(e);
    }
  }, "Log In"), /*#__PURE__*/React.createElement("button", {
    className: styles.signBtn,
    name: "signup",
    onClick: function onClick(e) {
      return handleDivClick(e);
    }
  }, "Sign Up")));
};

var Input = function Input() {
  var action = useContext(ActionContext);
  return action.customInput ? action.customInput({
    authorImg: action.userImg,
    main: true,
    handleCancel: action.handleCancel,
    submit: action.submit
  }) : /*#__PURE__*/React.createElement(InputField, {
    authorImg: action.userImg,
    main: true
  });
};

var CommentSection = function CommentSection(_ref) {
  var commentsArray = _ref.commentsArray,
      currentUser = _ref.currentUser,
      setComment = _ref.setComment,
      signinUrl = _ref.signinUrl,
      signupUrl = _ref.signupUrl,
      customInput = _ref.customInput;

  var _useState = useState(commentsArray),
      comments = _useState[0],
      setComments = _useState[1];

  useEffect(function () {
    setComments(commentsArray);
  }, [commentsArray]);
  return /*#__PURE__*/React.createElement(ActionProvider, {
    currentUser: currentUser,
    setComment: setComment,
    comments: comments,
    signinUrl: signinUrl,
    signupUrl: signupUrl,
    customInput: customInput
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.section
  }, /*#__PURE__*/React.createElement("div", {
    className: styles.inputBox
  }, signupUrl && !currentUser ? /*#__PURE__*/React.createElement(SignField, null) : /*#__PURE__*/React.createElement(Input, null)), /*#__PURE__*/React.createElement("div", {
    className: styles.displayComments
  }, /*#__PURE__*/React.createElement(DisplayComments, {
    comments: comments
  }))));
};

export { CommentSection };
//# sourceMappingURL=index.modern.js.map
